% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/etc_utils_fortify.R, R/g_fortify.R
\name{fortify}
\alias{fortify}
\alias{fortify.mmcurves}
\alias{fortify.mmpoints}
\alias{fortify.mscurves}
\alias{fortify.mspoints}
\alias{fortify.smcurves}
\alias{fortify.smpoints}
\alias{fortify.sscurves}
\alias{fortify.sspoints}
\title{Convert sscurves to a data frame for ggplot2.}
\usage{
\method{fortify}{sscurves}(model, ...)

\method{fortify}{mscurves}(model, ...)

\method{fortify}{smcurves}(model, ...)

\method{fortify}{mmcurves}(model, ...)

\method{fortify}{sspoints}(model, ...)

\method{fortify}{mspoints}(model, ...)

\method{fortify}{smpoints}(model, ...)

\method{fortify}{mmpoints}(model, ...)
}
\arguments{
\item{model}{\code{sscurves} object generated by
  \code{\link{evalmod}}.}

\item{...}{Not used by this method.}
}
\value{
The \code{fortify} function retruns a data frame for
  \code{\link[ggplot2]{ggplot2}}.
}
\description{
\code{fortify} converts an \code{sscurves} object generated by
  \code{\link{evalmod}} to a data frame for
  \code{\link[ggplot2]{ggplot2}}.
}
\examples{
## Load ggplot2
library(ggplot2)

## Load a dataset with 10 positives and 10 negatives
data(P10N10)

## Convert sscurve object to a data frame
curves <- evalmod(scores = P10N10$scores, labels = P10N10$labels)
df <- fortify(curves)

## Fortified data frame can be used for plotting a ROC curve
p_roc <- ggplot(subset(df, group == "ROC"), aes(x = x, y = y))
p_roc <- p_roc + geom_line()
p_roc

## Fortified data frame can be used for plotting a Precision-Recall curve
p_prc <- ggplot(subset(df, group == "PRC"), aes(x = x, y = y))
p_prc <- p_prc + geom_line()
p_prc

## Create sample datasets with 100 positives and 100 negatives
samps <- create_sim_samples(1, 100, 100, "all")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
curves <- evalmod(scores = P10N10$scores, labels = P10N10$labels)
df <- fortify(curves)

## Fortified data frame can be used for plotting a ROC curve
df_roc <- subset(df, group == "ROC")
p_roc <- ggplot(df_roc, aes(x = x, y = y, color = modname))
p_roc <- p_roc + geom_line()
p_roc

## Fortified data frame can be used for plotting a Precision-Recall curve
df_prc <- subset(df, group == "PRC")
p_prc <- ggplot(df_prc, aes(x = x, y = y, color = modname))
p_prc <- p_prc + geom_line()
p_prc

## Prepare input data
samps <- create_sim_samples(10, 100, 100, "poor_er")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
curves <- evalmod_m(mdat)
df <- fortify(curves)

## Fortified data frame can be used for plotting a ROC curve
df_roc <- subset(df, group == "ROC")
p_roc <- ggplot(df_roc, aes(x = x, y = y, ymin = ymin, ymax = ymax))
p_roc <- p_roc + geom_smooth(stat = "identity")
p_roc

## Fortified data frame can be used for plotting a Precision-Recall curve
df_prc <- subset(df, group == "PRC")
p_prc <- ggplot(df_roc, aes(x = x, y = y, ymin = ymin, ymax = ymax))
p_prc <- p_roc + geom_smooth(stat = "identity")
p_prc

## Prepare input data
samps <- create_sim_samples(10, 100, 100, "all")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
curves <- evalmods_m(mdat)
df <- fortify(curves)

## Fortified data frame can be used for plotting a ROC curve
df_roc <- subset(df, group == "ROC")
p_roc <- ggplot(df_roc, aes(x = x, y = y, ymin = ymin, ymax = ymax,
                            color = modname))
p_roc <- p_roc + geom_smooth(stat = "identity")
p_roc

## Fortified data frame can be used for plotting a Precision-Recall curve
df_prc <- subset(df, group == "PRC")
p_prc <- ggplot(df_roc, aes(x = x, y = y, ymin = ymin, ymax = ymax,
                            color = modname))
p_prc <- p_roc + geom_smooth(stat = "identity")
p_prc



## Load ggplot2
library(ggplot2)

## Load a dataset with 10 positives and 10 negatives
data(P10N10)

## Convert sscurve object to a data frame
curves <- evalmod(mode = "basic", scores = P10N10$scores,
                  labels = P10N10$labels)
df <- fortify(curves)

## Create sample datasets with 100 positives and 100 negatives
samps <- create_sim_samples(1, 100, 100, "all")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
points <- evalmod(mode = "basic", scores = P10N10$scores,
                  labels = P10N10$labels)
df <- fortify(points)

## Prepare input data
samps <- create_sim_samples(10, 100, 100, "poor_er")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
points <- evalmod_m(mdat)
df <- fortify(points)

## Prepare input data
samps <- create_sim_samples(10, 100, 100, "all")
mdat <- mmdata(samps[["scores"]], samps[["labels"]],
               modnames = samps[["modnames"]],
               dsids = samps[["dsids"]])

## Convert sscurve object to a data frame
points <- evalmod(mdat)
df <- fortify(points)
}
\seealso{
\code{\link{evalmod}} for generating \code{sscurves}.
 \code{\link{autoplot.sscurves}} for plotting curves.
}

